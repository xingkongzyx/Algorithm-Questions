? 最小滑动窗口七道题总结: https://leetcode.cn/problems/M1oyTv/solution/by-flix-4bcr/
外网的题目
https://leetcode.com/discuss/study-guide/1773891/Sliding-Window-Technique-and-Question-Bank
https://leetcode.com/discuss/study-guide/657507/Sliding-Window-for-Beginners-Problems-or-Template-or-Sample-Solutions
? 13道题总结 https://leetcode.cn/problems/longest-substring-without-repeating-characters/solution/yi-ge-mo-ban-miao-sha-10dao-zhong-deng-n-sb0x/

https://leetcode.cn/circle/article/WC6uBv/ 
!最大窗口与最小窗口的区别:
? https://leetcode.cn/problems/fruit-into-baskets/solution/shen-du-jie-xi-zhe-dao-ti-he-by-linzeyin-6crr/

? 刷题总结: https://leetcode.cn/circle/discuss/Nlk5EH/

关键点：何时进行窗口收缩？

求最小窗口：窗口合法 → 移左变小：while/if → 内部目标捕捉
求最大窗口：窗口非法 → 移左变小：while/if → 外部目标捕捉
求固定窗口：窗口合适 → 移左变小：if → 内部目标捕捉
* 如果是求窗口的最大可行解，那么肯定是在右指针前进的过程中得到一个可行解。
* 如果是求窗口最小可行解，那么肯定是在左指针前进的过程中得到一个可行解。

> 可行解的最大窗口宽度
* 求解思路
* Ⅰ.使用滑动窗口思想，定义左右指针，分别指向窗口左右边界；
* Ⅱ.当窗口内某项指标不满足条件时，收缩左边界，更新因左边界元素滑出窗口引起窗口内某项指标的变化，直至窗口内某项指标满足条件，记录此时窗口宽度，更新最大窗口宽度值；
* Ⅲ.右指针继续向后遍历，直至整个数据集被遍历完全，返回最大窗口宽度；


> 可行解的最小窗口宽度
* 求解思路
* Ⅰ.使用滑动窗口思想，定义左右指针，分别指向窗口左右边界；右指针向后移动，记录待滑入窗口元素状态，满足条件则进入窗口，更新滑入窗口的某项指标；
* Ⅱ.当窗口内某项指标满足条件时，该窗口是个可行解，此时要求出这个可行解内宽度最小的可行解；
* Ⅲ.固定可行解窗口的右边界，让窗口的左边界右移，更新窗口内因左边界滑出窗口而引起窗口内某项指标的变化，直至该指标不满足条件时，此时窗口宽度加1，即是可行解内最小的窗口，记录此时窗口的宽度，更新最小窗口宽度；
* Ⅳ.右边界继续遍历，直至整个数据集被遍历完全，终止遍历，返回最小窗口宽度；

> 固定窗口求可行解个数
* 求解思路
* Ⅰ.此类问题，假设固定窗口宽度为k，数据集大小为numsSize；
* Ⅱ.只需定义左指针left即可，窗口可以被描述为[left, left + k - 1]，left的遍历范围为[0, numsSize - k - 1]；
* Ⅲ.在遍历过程中，指针不断向后移动，更新窗口内元素的某项指标，判断该指标是否满足条件，确定该窗口是否是可行解；
* Ⅳ.在指针向后移动的过程中，注意更新因窗口左边界离开窗口和新元素进入窗口而引起窗口内某项指标的变化；

? 链接：https://leetcode.cn/circle/article/XJr59B/
